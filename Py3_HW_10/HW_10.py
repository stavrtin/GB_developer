'''–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å.
üìå –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –µ—ë –ø–ª–æ—â–∞–¥—å.'''

# ----------------Task_1 --------------------------
from math import pi


class Circle:

    def __init__(self, radius):
        self.radius = radius

    def lenth_circl(self):
        return 2 * pi * self.radius

    def squer_circl(self):
        return pi * self.radius * self.radius


'''–ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. 
üìå –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. 
üìå –£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä –∏ –ø–ª–æ—â–∞–¥—å. 
üìå –ï—Å–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –∫–≤–∞–¥—Ä–∞—Ç.'''


class Rangler:

    def __init__(self, length: int, winght: int = None):
        self.length = length
        self.winght = length if winght is None else winght

    def perim(self) -> int:
        return 2 * (self.length + self.winght)

    def squer(self) -> int:
        return self.length * self.winght


# if __name__ == '__main__':
#     rang = Rangler(4)
#     print(f'{rang.perim() = }, {rang.squer() = }')

'''–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ: –§–ò–û, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ç.–ø. –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä. 
üìå –£ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç–æ–¥—ã birthday –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞ –≥–æ–¥, full_name –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –§–ò–û –∏ —Ç.–ø. –Ω–∞ 
–≤–∞—à –≤—ã–±–æ—Ä. 
üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç.'''


class Human:

    def __init__(self, first_name: str, last_name: str, age: int, gender: str):
        self.first_name = first_name
        self.last_name = last_name
        self.__age = age
        self.gender = gender

    def get_age(self):
        return self.__age

    def birthday(self):
        self.__age += 1
        return self.__age

    def full_name(self):
        print(f'{self.first_name} {self.last_name} ')

    def __str__(self):
        return f'{self.first_name} {self.last_name} {self.get_age()} {self.gender} '


# if __name__ == '__main__':
#     fio1 = Human('–ü–µ—Ç—è','–ò–≤–∞–Ω–æ–≤', 21,'–º')
#     fio2 = Human('Kate','Pet', 24,'fem')
#     fio3 = Human('Jak','Shirak', 56,'m')
#     print(fio1)
#     print(fio2)
#     print(fio3)
#     fio1.birthday()
#     fio2.birthday()
#     fio1.birthday()
#     print(fio1)
#     print(fio2)
#     print(fio3)

'''–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –°–æ—Ç—Ä—É–¥–Ω–∏–∫. 
üìå –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞—Å—Å–æ–º —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. 
üìå –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
‚óã —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
‚óã —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –≤—ã—á–∏—Å–ª—è–µ–º—ã–π –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ü–∏—Ñ—Ä id –Ω–∞ —Å–µ–º—å '''

from random import  randint
import typing

class Sotrudnik(Human):

    def __init__(self, first_name: str, last_name: str, age: int, gender: str, prof: str):
        self.prof = prof
        self.id = self._get_id()
        self.level = self._secr_level()
        super().__init__(first_name, last_name, age, gender)

    def __str__(self):
        return f'{self.first_name} {self.last_name} {self.get_age()} {self.gender}  {self.prof} {self.id}  {self.level} '

    def _get_id(self)-> int:
        MIN_ID = 100000
        MAX_ID = 1000000
        return randint(MIN_ID, MAX_ID)

    def _secr_level(self)-> int:
        id = self._get_id()
        sum = 0
        for i in list(str(id)):
            sum += int(i)
        res_level = sum % 7
        return res_level


# if __name__ == '__main__':
#     fio_sotr1 = Sotrudnik('–ü–µ—Ç—è','–ò–≤–∞–Ω–æ–≤', 21,'–º', 'povar')
#     fio_sotr2 = Sotrudnik('Kate','Pet', 24,'fem', 'strip')
#     fio_sotr3 = Sotrudnik('Jak','Shirak', 56,'m', 'teacher')
#     print(fio_sotr1)
#     print(fio_sotr2)
#     print(fio_sotr3)

'''–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∏ (–∏–ª–∏ –±–æ–ª–µ–µ) –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä —Ä—ã–±—ã, –ø—Ç–∏—Ü—ã –∏ —Ç.–ø. 
üìå –£ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∫ –æ–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –∏–º—è, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∞. 
üìå –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
üìå –í—ã–Ω–µ—Å–∏—Ç–µ –æ–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–ª–∞—Å—Å –ñ–∏–≤–æ—Ç–Ω–æ–µ. 
üìå –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞—Å–ª–µ–¥—É–π—Ç–µ –æ—Ç –Ω–µ–≥–æ. 
üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∫–ª–∞—Å—Å—ã –≤–Ω–µ—Å–µ–Ω—ã –ø—Ä–∞–≤–∫–∏.'''


class Animal:

    def __init__(self, name: str, weigth: int, age: int):
        self.name = name
        self.weigth = weigth
        self.age = age

    def __str__(self):
        return f'{self.name = }, {self.weigth = }, {self.age = }'

    def move(self):
        pass

    def say(self):
        pass


class Bird(Animal):

    def __init__(self, name: str, weigth: int, age: int, vid_bird:str, sound: str):
        super().__init__(name, weigth, age)
        self.vid_bird = vid_bird
        self.sound = sound

    def __str__(self):
        return f'{super().__str__() }, {self.vid_bird = }, {self.move() = }, {self.say() = }'

    def move(self):
        return "fly"

    def say(self):
        return self.sound


class Dog(Animal):

    def __init__(self, name: str, weigth: int, age: int, vid_dog:str):
        super().__init__(name, weigth, age)
        self.vid_dog = vid_dog

    def move(self):
        return "run"

    def say(self):
        return 'gav-gav'

    def __str__(self):
        return f'{super().__str__() }, {self.vid_dog = }, {self.move() = }, {self.say() = }'


class Fish(Animal):

    def __init__(self, name: str, weigth: int, age: int, vid_fish:str):
        super().__init__(name, weigth, age)
        self.vid_fish = vid_fish

    def move(self):
        return "swim"

    def say(self):
        return 'bul-bul'

    def __str__(self):
        return f'{super().__str__() }, {self.vid_fish = }, {self.move() = }, {self.say() = }'

# if __name__ == '__main__':
#     bird_solov = Bird('–°–æ–ª–æ–≤–µ–π', 3, 5, '—Å–æ–ª–æ–≤–µ–π–∫–∏', '—Ç—Ä—É-–ª—è-–ª—è')
#     dog_shpic = Dog('–¢–µ—Ä—å–µ—Ä', 30, 15, 'Tax')
#     fish_fish = Fish('–ì—É–ø–∏', 0, 2, '–ö–∞—Ä–ø')
#
#     print(bird_solov)
#     print(dog_shpic)
#     print(fish_fish)

'''üìå –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 5-6. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ–∞–±—Ä–∏–∫—É. 
‚óã –ö–ª–∞—Å—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤) –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞. 
‚óã –í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–ª–∞—Å—Å–∞-—Ñ–∞–±—Ä–∏–∫–∏.
üìå –í–æ–∑—å–º–∏—Ç–µ 1-3 –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ —Ä–µ—à–∞–ª–∏.
–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞, –∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–≤–æ–π—Å—Ç–≤–∞. –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ—à–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. '''

class Fabric:

    def make_animal(self, animal_type: str, *args, **kwargs):
        new_animal = self._get_maker(animal_type)
        return new_animal(*args, **kwargs)

    def _get_maker(self, animal_type: str):
        types = {"dog": Dog, "bird": Bird, "fish": Fish}
        return types[animal_type.lower()]


if __name__ == '__main__':
    fabric = Fabric()
    animal_from_fabric = fabric.make_animal('Bird', '–°–æ–ª–æ–≤–µ–π', 3, 5, '—Å–æ–ª–æ–≤–µ–π–∫–∏', '—Ç—Ä—É-–ª—è-–ª—è')
    print(animal_from_fabric)


print('--------------------------TASK 3----------------------------------')

'''–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ ‚Äúa/b‚Äù - –¥—Ä–æ–±—å —Å —á–∏—Å–ª–∏—Ç–µ–ª–µ–º –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–º.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—É–º–º—É –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ* –¥—Ä–æ–±–µ–π.
–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å fractions.'''


class Sum:

    def __init__(self, drob1: str, drob2:str):
        self.drob1 = drob1
        self.drob2 = drob2

    def translate_str_to_digit(self, str_drob: str):
        data_chislit = int(str_drob.split('/')[0])
        data_znamenat = int(str_drob.split('/')[1])
        return data_chislit, data_znamenat

    def data_sum(self, data1, data2):
        a_ch = self.translate_str_to_digit(data1)[0]
        a_zn = self.translate_str_to_digit(data1)[1]
        b_ch = self.translate_str_to_digit(data2)[0]
        b_zn = self.translate_str_to_digit(data2)[1]
        ch = a_ch * b_zn + b_ch * a_zn
        zn = b_zn * a_zn
        res = (ch, zn)
        return res

    def __str__(self):
        return f'{self.drob1} + {self.drob2} =  {self.data_sum(self.drob1, self.drob2)[0]}/{self.data_sum(self.drob1, self.drob2)[1]}'

class Multy:

    def __init__(self, drob1: str, drob2:str):
        self.drob1 = drob1
        self.drob2 = drob2

    def translate_str_to_digit(self, str_drob: str):
        data_chislit = int(str_drob.split('/')[0])
        data_znamenat = int(str_drob.split('/')[1])
        return data_chislit, data_znamenat

    def data_mult(self, data1, data2):
        a_ch = self.translate_str_to_digit(data1)[0]
        a_zn = self.translate_str_to_digit(data1)[1]
        b_ch = self.translate_str_to_digit(data2)[0]
        b_zn = self.translate_str_to_digit(data2)[1]
        res = (a_ch * b_ch, a_zn * b_zn)
        return res

    def __str__(self):
        return f'{self.drob1} * {self.drob2} =  {self.data_mult(self.drob1, self.drob2)[0]}/{self.data_mult(self.drob1, self.drob2)[1]}'



a = '3/5'
b = '4/5'

sum1 = Sum(a, b)
mult1 = Multy(a,b)
print(sum1)
print(mult1)